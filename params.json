{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"ConfigPTFE","body":"# What does ConfigPTFE do?\r\nThis library helps software development teams accomplish two goals:\r\n1.  share common configuration data between multiple applications.\r\n1.  switch configuration data used by applications via a global \"environment name\".\r\n\r\n## How does ConfigPTFE do that?\r\n\"ConfigPTFE.AdvancedConfigurationProvider\" inherits from the Microsoft class \"System.Configuration.ProtectedConfigurationProvider\" and overrides its' \"Decrypt\" method.  The Decrypt method is expected to hand back a properly formed XmlNode to be integrated into the web.config or app.config.  However, there are no restrictions on what we do inside that method, so ConfigPTFE gathers its' data from whichever config files or database tables you tell it to. \r\n\r\nAfter the Decrypt method gathers the data from one or more specified sources, it creates a properly formed XmlNode and hands it back to the caller (Microsoft's System.Configuration) to integrate it back into the web.config or app.config.  ConfigurationProviders can be used on most of the nodes in an app.config or web.config.\r\n\r\n## I get the \"Config\" part, but What the heck is \"PTFE\"?\r\nPolyTetraFluoroEthylene.  The most well known brand name of PTFE is \"Teflon\" by DuPont Co.    \r\nNo, the software does not really contain PolyTetraFluoroEthylene...\r\n\r\n## Some Benefits:\r\n1.  Uses technology you already know. Access settings with System.ConfigurationManager.\r\n1.  Config sections may be easily encrypted with AES encryption.\r\n1.  Settings may be stored in xml config files or in database tables\r\n1.  Less config values duplication.  Environment specific values are merged into a base config file at runtime, so values shared accross envionments don't have to be duplicated accross multiple files.\r\n1.  Easy application deployments. Environment specific config values are removed from the web.config/app.config and the environment appropriate values are merged into the web.config/app.config at runtime.\r\n1.  Very customizable. Since the environment name value is not held in source control, a developer can easily create custom connectionstring or applicationsetting config files or databases in thier development or test environment to feed a system under test any values they need.\r\n1.  Even more customizable since you have access to the source code.  You can make it do anything you want!\r\n\r\n## Examples\r\nSeveral samples of ConfigPTFE usage are included in the solution. \r\n* Some examples may require you to setup databases via the provided SQL scripts.\r\n* Some examples may require you to install configuration files at a common location on your filesystem via the Administration utility provided as a project in this solution.\r\n\r\n## Setting up your environment & project:\r\n###For a simple setup where your main goal is to leverage the \"environment aware\" configs, you'll need to do this:\r\n\r\n1.)  Use the command line Admin tool (one of the projects in the solution) to create a sample \"environment config\" file at the expected location on your development machine (ex. for Windows 7 and above => C:\\ProgramData\\ConfigPTFE\\).    \r\n2.)  Open and amend this sample environment config with the appropriate \"environment name\" (ex. \"DEV\" for your local workstation)    \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<configuration>\r\n  <environment name=\"DEV\" />\r\n  <!-- ... -->\r\n</configuration>\r\n```\r\n\r\n3.)  Place a \"configProtectedData\" section to your application's web.config or app.config which references this filename in the \"environmentFileName\" attribute of the \"add\" node.     \r\n_(Note: you can rename the file, just make sure you use the name you gave it here.)_    \r\n\r\n```xml\r\n<configuration>\r\n  <configProtectedData>\r\n    <providers>\r\n      <add name=\"LowFrictionConfigProvider\" \r\n           type=\"ConfigPTFE.AdvancedConfigurationProvider, ConfigPTFE\" \r\n           environmentFileName=\"sample.environment.config\" />\r\n    </providers>\r\n  </configProtectedData>\r\n  <!-- ... -->\r\n</configuration>\r\n```\r\n\r\n4.)  Place an \"appSettings\" and/or \"connectionStrings\" node in your web/app.config using this format:    \r\n\r\n```xml\r\n<appSettings configProtectionProvider=\"LowFrictionConfigProvider\">\r\n  <EncryptedData>\r\n    <sectionInfo file=\"[LOCAL]\\ConfigSections\\AppSettings\\appSettings.[ENVIRONMENT].config\" />\r\n  </EncryptedData>\r\n</appSettings>\r\n\r\n<connectionStrings configProtectionProvider=\"LowFrictionConfigProvider\">\r\n  <EncryptedData>\r\n    <sectionInfo file=\"[LOCAL]\\ConfigSections\\Connectionstrings\\connectionStrings.[ENVIRONMENT].config\" />\r\n  </EncryptedData>\r\n</connectionStrings>\r\n```\r\n\r\n5.)  Create the folder(s) \"ConfigSections\\Connectionstrings\" &/or \"ConfigSections\\AppSettings\"in your application to store configuration data specific to your application.    \r\n\r\n6.)  Create a base config file in each of those folders to hold all your settings which will be used in all environments (DEV, TEST, INTEGRATION, REGRESSION, PRODUCTION, etc.)    \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<EncryptedData IsEncrypted=\"false\">\r\n\t<!-- \"Rivendell\" is defaulted to invalid values, so we may recognize at runtime that \r\n              an appropriate environment specific diff file was not merged. -->\r\n\t<add name=\"Rivendell\" connectionString=\"...\" providerName=\"...\" />\r\n</EncryptedData>\r\n```\r\n\r\n7.)  Create several environment specific configs side by side with that base config, each filled with the specific values you intend to override in the base config for that environment. (Don't forget that you'll need to use the appropriate Config Transform commands on each node. For more info on syntax, cf. [http://msdn.microsoft.com/en-us/library/dd465326.aspx](http://msdn.microsoft.com/en-us/library/dd465326.aspx))    \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<EncryptedData IsEncrypted=\"false\" xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\">\r\n\t<add name=\"Rivendell\" \r\n         connectionString=\"Server=.; Database=Rivendell; Trusted_Connection=True;\" \r\n         providerName=\"System.Data.SqlClient\"\r\n         xdt:Transform=\"SetAttributes\" \r\n         xdt:Locator=\"Match(name)\" />\r\n</EncryptedData>\r\n```\r\n\r\n8.)  Run your application and see the appropriate values get pulled back via the ConfigurationManager   \r\n```c#\r\nforeach (var key in ConfigurationManager.AppSettings.AllKeys) {\r\n    Console.WriteLine(\"{0}{1}\", (key + \":\").PadRight(30), ConfigurationManager.AppSettings[key]);\r\n}\r\n\r\n```\r\n    \r\n###If you want to also share config values across multiple applications via a single file (ex. Connectionstrings):\r\n1.)  Create the appropriate config file(s) at some location on the filesystem   \r\n     (ex. C:\\Configuration\\Connectionstrings).    \r\n2.)  Add/Amend the appropriate \"configSectionLocations\" entries in the environment.config file   \r\n     (ex. Set the correct file location(s) for the \"COMMONSETTINGS\" or \"CONNECTIONSTRINGS\" tokens.)    \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<configuration>\r\n    <environment name=\"DEV\" role=\"WEBSERVER\" />\r\n    <configSectionLocations>\r\n        <add key=\"COMMONSETTINGS\" value=\"C:\\Configuration\\CommonSettings\" />\r\n        <add key=\"CONNECTIONSTRINGS\" value=\"C:\\Configuration\\Connectionstrings\" />\r\n    </configSectionLocations>\r\n</configuration>\r\n```\r\n\r\n3.) Add the appropriate \"sectionInfo\" nodes in your applications' web.config/app.config appsettings or connectionstrings nodes (cf. step 4 above.)  Note that you can have more than one \"sectionInfo\" node.    \r\n\r\n```xml\r\n<appSettings configProtectionProvider=\"LowFrictionConfigProvider\">\r\n  <EncryptedData>\r\n    <sectionInfo file=\"[LOCAL]\\ConfigSections\\AppSettings\\appSettings.[ENVIRONMENT].config\" />\r\n    <sectionInfo file=\"[COMMONSETTINGS]\\appSettings.[ENVIRONMENT].config\" />\r\n  </EncryptedData>\r\n</appSettings>\r\n\r\n<connectionStrings configProtectionProvider=\"LowFrictionConfigProvider\">\r\n  <EncryptedData>\r\n    <sectionInfo file=\"[LOCAL]\\ConfigSections\\Connectionstrings\\connectionStrings.[ENVIRONMENT].config\" />\r\n    <sectionInfo file=\"[CONNECTIONSTRINGS]\\connectionStrings.[ENVIRONMENT].config\" />\r\n  </EncryptedData>\r\n</connectionStrings>\r\n```\r\n    \r\n    \r\n###If you want to also pull config values from a database table (ex. appsettings):\r\n1.) Add \"sectionInfo\" node(s) to your applications' web.config/app.config appsettings node with the following format.    \r\n_(Note: the \"connectionStringName\" attribute refers to a named connectionstring in the \"connectionStrings\" node of the web.config/app.config.  the \"databaseTable\" attribute value should be in the format of [schema].[table name])_    \r\n```xml\r\n<appSettings configProtectionProvider=\"LowFrictionConfigProvider\">\r\n  <EncryptedData>\r\n    <sectionInfo file=\"[LOCAL]\\ConfigSections\\AppSettings\\appSettings.[ENVIRONMENT].config\" />\r\n    <sectionInfo file=\"[COMMONSETTINGS]\\appSettings.[ENVIRONMENT].config\" />\r\n    <sectionInfo connectionStringName=\"Rivendell\"  \r\n                 databaseTable=\"[Configuration].[ApplicationSetting]\" \r\n                 keyColumn=\"Name\" \r\n                 valueColumn=\"Value\" \r\n                 throwLoadFailureExceptions=\"true\" />\r\n  </EncryptedData>\r\n</appSettings>\r\n```","google":"","tagline":"A configuration library which assists in reducing the friction between .NET projects and their configuration data."}